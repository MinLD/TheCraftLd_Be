package com.minld._spring_boot.service;

import com.minld._spring_boot.Repository.*;
import com.minld._spring_boot.dto.request.MediaUpdateRequest;
import com.minld._spring_boot.dto.response.MediaResponse;
import com.minld._spring_boot.dto.response.ProductsResponse;
import com.minld._spring_boot.entity.*;
import com.minld._spring_boot.exception.AppException;
import com.minld._spring_boot.exception.ErrorCode;
import com.minld._spring_boot.mapper.MediaMapper;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@Slf4j
@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class MediaService {
    MediaReponsitory mediaRepository; // Sá»­a typo
    CloudinaryService cloudinaryService;
    MediaMapper mediaMapper;

    public MediaResponse updateFile(MediaUpdateRequest request, Long id) {
        MediaFile meidaFileCurrent = mediaRepository.findById(id).orElseThrow(() -> new AppException(ErrorCode.MEDIA_NOT_FOUND));
        MediaFile mediaFile = null;
        if (request.getImages() != null) {
            try {
                mediaFile = cloudinaryService.updateFile(request.getImages(), "media", String.valueOf(id));
                mediaRepository.save(mediaFile);
                meidaFileCurrent.setUrl(mediaFile.getUrl());
                meidaFileCurrent.setFileSize(mediaFile.getFileSize());

            } catch (AppException | IOException e) {
                throw new AppException(ErrorCode.UPLOAD_FAILED);
            }
        }


            return mediaMapper.toMediaResponse(mediaRepository.save(meidaFileCurrent));

    }
}