package com.minld._spring_boot.controller;

import com.minld._spring_boot.dto.request.CategoriesCreationRequest;
import com.minld._spring_boot.dto.request.CategoriesUpdationRequest;
import com.minld._spring_boot.dto.request.ProductsCreationRequest;
import com.minld._spring_boot.dto.response.ApiResponse;
import com.minld._spring_boot.dto.response.CategoriesResponse;
import com.minld._spring_boot.dto.response.ProductsResponse;
import com.minld._spring_boot.service.CategoriesService;
import com.minld._spring_boot.service.ProductsService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Slf4j
@RestController
@RequestMapping("/products")
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class ProductsController {
    ProductsService productsService;

    @PostMapping(consumes = "multipart/form-data")
    public ApiResponse<Map<String, Object>> createProduct(
            @RequestPart(value = "productsCreationRequest", required = false) ProductsCreationRequest request,
            @RequestPart(value = "images", required = false) List<MultipartFile> images,
            @RequestPart(value = "attributesCreationRequests[0].attributeValuesCreationRequests[0].image", required = false) MultipartFile attrImage0,
            @RequestPart(value = "attributesCreationRequests[1].attributeValuesCreationRequests[0].image", required = false) MultipartFile attrImage1) {
        log.info("Request received at /products with Content-Type: multipart/form-data");

        // Log thông tin từ ProductsCreationRequest
        log.info("Received ProductsCreationRequest: {}", request != null ? request : "None");

        // Log danh sách images
        List<String> imageNames = images != null ? images.stream().map(MultipartFile::getOriginalFilename).collect(Collectors.toList()) : List.of("None");
        log.info("Received images: {}", imageNames);

        // Log file cho attribute values
        String attrImage0Name = attrImage0 != null ? attrImage0.getOriginalFilename() : "None";
        String attrImage1Name = attrImage1 != null ? attrImage1.getOriginalFilename() : "None";
        log.info("Received attrImage0: {}", attrImage0Name);
        log.info("Received attrImage1: {}", attrImage1Name);

        // Tạo Map để chứa thông tin log
        Map<String, Object> logData = new HashMap<>();
        logData.put("productsCreationRequest", request != null ? request : "None");
        logData.put("images", imageNames);
        logData.put("attrImage0", attrImage0Name);
        logData.put("attrImage1", attrImage1Name);

        return ApiResponse.<Map<String, Object>>builder()
                .result(logData)
                .build();
    }
//    @PostMapping("/{id_categories}")
//    ApiResponse<ProductsResponse> create(@PathVariable Long id_categories, @ModelAttribute ProductsCreationRequest request) {
//        return ApiResponse.<ProductsResponse>builder().result(productsService.create(id_categories, request)).build();
//    }

    @GetMapping()
    ApiResponse<List<ProductsResponse>> getAllProducts() {
        return ApiResponse.<List<ProductsResponse>>builder().result(productsService.getAllProducts()).build();
    }

    @DeleteMapping("/{id}")
    ApiResponse<Void> delete(@PathVariable Long id) {
        productsService.delete(id);
        return ApiResponse.<Void>builder()
                .result(productsService.delete(id))
                .build();
    }

    @GetMapping("/seller/{categoriesId}")
    public ApiResponse<List<ProductsResponse>>  getProductsBySellerAndCategory( @PathVariable Long categoriesId) {
        return ApiResponse.<List<ProductsResponse>>builder()
                .result(productsService.getProductsBySellerAndCategory(categoriesId))
                .build();
    }

}
